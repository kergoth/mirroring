#!/usr/bin/env python3
#
# Test file integrity for the specified files or directories, using file type-specific file integrity checks.
#
# Note that only file integrity is tested here, where viable. This script does not lint or check for security issues in the files, nor does it check language syntax in source code.
#
# First, we gather a list of files, then for each file, check their file type, and perform appropriate filetype-specific file integrity checks, such as zip -T, zip -F, lsar -t, innoextract -t, etc.
#
# Usage:
#   ./test-file-integrity [PATH] [PATH]...
#
# Example:
#   ./test-file-integrity /path/to/file.zip
#   ./test-file-integrity /path/to/directory

import argparse
import os
import subprocess
import sys


def run_command(command):
    try:
        result = subprocess.run(
            command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )
    except subprocess.CalledProcessError as e:
        print("Error: " + str(e))
        return False, e.stdout, e.stderr
    return True, result.stdout, result.stderr


def test_file_integrity(file, keep_going=False):
    if os.path.isdir(file):
        print("Testing directory: " + file)
        return test_directory_integrity(file, keep_going=keep_going)
    else:
        if not test_filetype_integrity(os.path.realpath(file)):
            print("Error: Integrity check failed for " + file)
            return False
    return True


skipped_mimetypes = [
    "application/mac-binhex40",
    "application/msword",
    "application/octet-stream",
    "application/vnd.symbian.install",
    "application/vnd.ms-office",
    "application/x-dosexec",
    "application/x-ms-ne-executable",
    "message/rfc822",
    "text/plain",
    "inode/x-empty",
]
lsar_mimetypes = [
    "application/gzip",
    "application/java-archive",
    "application/x-7z-compressed",
    "application/x-arc",
    "application/x-bzip2",
    "application/x-compress",
    "application/x-lzh-compressed",
    "application/x-rar",
    "application/x-stuffit",
    "application/x-tar",
    "application/x-xz",
    "application/x-zoo",
    "application/zip",
]


def is_lsar_mimetype(mime_type):
    return mime_type in lsar_mimetypes


# TODO: add more file type checks
# - audio/video files with ffmpeg
# - image files with exiftool
# - office files with libreoffice
# - etc.
def test_filetype_integrity(file):
    print("Testing file: " + file)
    mime_type = (
        subprocess.run(
            ["file", "--mime-type", "--brief", file],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        .stdout.decode("utf-8")
        .strip()
    )

    if (
        mime_type in skipped_mimetypes
        or (mime_type.startswith("text/") and mime_type != "text/xml")
        or mime_type.startswith("message/")
    ):
        return True

    print("MIME type: " + mime_type)

    if is_lsar_mimetype(mime_type):
        return run_command(["lsar", "-t", file])[0]
    elif "application/vnd.microsoft.portable-executable" == mime_type:
        file_type = subprocess.run(
            ["file", file], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE
        ).stdout.decode("utf-8")
        file_type = file_type.split(": ")[1].strip()
        print("File type: " + file_type)

        ret = run_command(["readpe", file])[0]

        if "UPX compressed" in file_type:
            upx_ret, stdout, stderr = run_command(["upx", "-t", file])
            # UPX returns non-zero if it can't unpack it due to an obsolete
            # version of UPX being used to pack it, and this is not an
            # integrity issue.
            if not upx_ret and "CantUnpackException" not in stderr.decode("utf-8"):
                ret = False

        if (
            "Inno Setup installer" in file_type
            or "InnoSetup self-extracting archive" in file_type
        ):
            ret = ret and run_command(["innoextract", "-t", file])
        elif "RAR self-extracting archive" in file_type:
            ret = ret and run_command(["lsar", "-t", file])
        elif "InstallShield self-extracting archive" in file_type:
            ret = ret and run_command(["lsar", "-t", file])
        elif "self-extracting" in file_type:
            print(f"Unhandled self-extracting archive for {file}: {file_type}")

        return ret
    elif "application/x-msi" == mime_type:
        return run_command(["msiinfo", "suminfo", file])
    elif "application/pdf" == mime_type:
        return run_command(["pdfinfo", file])
    # elif "SQLite 3.x database" in file_type:
    #     return run_command(["sqlite3", file, ".tables"])
    elif "text/xml" == mime_type:
        return run_command(["xmllint", "--noout", file])
    elif mime_type.startswith("image/"):
        return run_command(["exiftool", file])
    # elif "text/html" == mime_type:
    # return run_command(["tidy", "-q", "-e", file])
    # elif "application/vnd.ms-office" == mime_type:
    #     if "PatchSourceList" in file or file.endswith(".msp"):
    #         # Skip Windows Installer patch files
    #         return True
    #     return run_command(["libreoffice", "--headless", "--convert-to", "pdf", file])
    # elif "text/x-tex" == mime_type:
    # return run_command(["pdflatex", "-interaction=nonstopmode", file])
    # elif "application/vnd.wordperfect" == mime_type:
    # return run_command(["libreoffice", "--headless", "--convert-to", "pdf", file])
    # elif "application/postscript" == mime_type:
    # return run_command(["ps2pdf", file])
    # elif "message/news" == mime_type:
    # return run_command(["formail", "-cz", file])
    # elif "text/troff" == mime_type:
    # return run_command(["groff", "-Tps", file])
    elif "text/PGP" == mime_type:
        return run_command(["gpg", "--list-packets", file])
    else:
        print(f"Unhandled mime type {mime_type} for {file}")
    return True


def test_directory_integrity(directory, keep_going=False):
    ret = True
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.startswith("._"):
                continue
            elif file == ".DS_Store":
                continue
            file = os.path.join(root, file)
            if not test_file_integrity(file):
                ret = False
                if not keep_going:
                    return ret
    return ret


def main():
    parser = argparse.ArgumentParser(
        description="Test file integrity for the specified files or directories."
    )
    parser.add_argument("-k", "--keep-going", action="store_true", help="Keep going")
    parser.add_argument("paths", nargs="*", help="Paths to test")
    args = parser.parse_args()

    ret = 0
    for path in args.paths:
        if not test_file_integrity(path):
            ret = 1
            if not args.keep_going:
                break
    sys.exit(ret)


if __name__ == "__main__":
    main()
