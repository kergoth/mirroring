#!/usr/bin/env python3

import collections
import os
import pathlib
import sys
from enum import Enum

import click


DEVNULL = os.open(os.devnull, os.O_WRONLY)
SCRIPTNAME = os.path.basename(sys.argv[0])
CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])


class Verbosity(Enum):
    Quiet = -1
    Normal = 0
    Verbose = 1


@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument(
    "paths", nargs=-1, metavar="[PATH]...", type=click.Path(exists=True, path_type=pathlib.Path)
)
@click.option(
    "--verbose",
    "-v",
    "verbosity",
    is_flag=True,
    flag_value=Verbosity.Verbose,
    help="Cause check_subdirs to be verbose, showing files as they are copied.",
    type=Verbosity,
)
@click.option(
    "--quiet",
    "-q",
    "verbosity",
    is_flag=True,
    flag_value=Verbosity.Quiet,
    help="Cause check_subdirs to be quietier, showing fewer messages.",
    type=Verbosity,
)
@click.option(
    "--dry-run", "-n", is_flag=True, help="Dry run. Cause check_subdirs to pretend to copy files."
)
@click.option(
    "--ignore-case", "-i", is_flag=True, help="Ignore case in grouping files."
)
def check_subdirs(paths, verbosity, dry_run, ignore_case):
    prevdirs = None
    for path in paths:
        # print(path)
        # print(set(path.iterdir()))
        subdirs = set(p.name for p in path.iterdir() if p.is_dir())
        if prevdirs is not None and subdirs:
            if ignore_case:
                key = lambda i: i.lower()
            else:
                key = None
            new = sorted(subdirs - prevdirs, key=key)
            old = sorted(prevdirs - subdirs, key=key)
            if old and new:
                click.echo(f'{path.name}: {", ".join(old)} -> {", ".join(new)}')
            elif old and not new:
                click.echo(f'{path.name}: {", ".join(old)} removed')
            elif new and not old:
                click.echo(f'{path.name}: {", ".join(new)} added')

        prevdirs = subdirs


if __name__ == "__main__":
    try:
        ret = check_subdirs()
        sys.stdout.flush()
    except BrokenPipeError:
        # Python flushes standard streams on exit; redirect remaining output
        # to devnull to avoid another BrokenPipeError at shutdown
        os.dup2(DEVNULL, sys.stdout.fileno())
        sys.exit(1)  # Python exits with error code 1 on EPIPE
    else:
        sys.exit(ret)
