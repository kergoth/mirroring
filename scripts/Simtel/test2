#!/usr/bin/env python3

import collections
import os
import sys

import click


def read_blocks(f):
    block = []
    for line in f:
        line = line.rstrip('\r\n')
        if line:
            block.append(line)
        elif block:
            yield block
            block = []

    if block:
        yield block

def path_lines(paths, compress, verbose):
    first = True
    for block in paths:
        if not compress:
            if not first:
                yield '\n'
            else:
                first = False

        for p in block:
            yield p + '\n'

def subdir_key(p):
    parts = p.split('/')
    return parts[1].lower()

def filter_blocks(existing):
    for block in read_blocks(sys.stdin):
        # if len(block) < 2:
        #     continue

        if existing:
            block = [p for p in block if os.path.exists(p)]
            if not block:
                continue

        block = list(sorted(block))

        # Filter out gnuish entries
        block = [p for p in block if 'gnuish' not in p.lower() and 'djgpp' not in p.lower()]

        if all(subdir_key(p) is not None and subdir_key(p) == subdir_key(block[0]) for p in block):
            continue

        yield block

        if len(block) < 2:
            continue

        by_dir = collections.defaultdict(list)
        for p in block:
            by_dir[p.split('/')[0]].append(p)
        # by_dir.update((p.split('/')[0], p) for p in block)

        prev = None
        for year, paths in by_dir.items():
            keys = set(subdir_key(p) for p in paths)
            if prev is not None and keys != prev:
                parts = p.split('/')
                rest = '/'.join(parts[2:])
                new = keys - prev
                new = [os.path.join(k, rest) for k in sorted(new)]
                old = prev - keys
                old = [os.path.join(k, rest) for k in sorted(old)]
                if old and new:
                    print('%s: %s -> %s' % (year, ', '.join(old), ', '.join(new)))
                elif old and not new:
                    print('%s: %s removed' % (year, ', '.join(old)))
                elif new and not old:
                    print('%s: %s added' % (year, ', '.join(new)))
            prev = keys

#         prev = None
#         for p in block:
#             cur = subdir_key(p)
#             if prev is not None and cur != prev:
#                 parts = p.split('/')
#                 rest = '/'.join(parts[2:])
#                 print('%s: %s/%s -> %s/%s' % (parts[0], prev, rest, cur, rest))
            # prev = cur

@click.command()
@click.option('--existing/--no-existing', '-e', is_flag=True, default=False)
@click.option('--pager/--no-pager', is_flag=True, default=True, help='Page output when on a terminal. Default.')
def fdupes_select(existing, pager):
    lines = path_lines(filter_blocks(existing), False, False)

    if pager and sys.stdout.isatty():
        click.echo_via_pager(lines)
    else:
        for line in lines:
            click.echo(line, nl=False)

if __name__ == '__main__':
    fdupes_select()
